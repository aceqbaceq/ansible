---

- name: 'play1: create LVM mountpoint'
  max_fail_percentage: 0
  hosts: "{{ current_working_set }}"
  become: yes
  vars_files: 
       - vars/vars.yml



  tasks:
    - name: check if all hosts are online 
      ping:

    - name: install needed packages
      apt: 
        pkg:
           - scsitools
           - sg3-utils
        state: present

    - name: "rescan scsi bus"
      command: /sbin/rescan-scsi-bus
      register: vasya
      changed_when: false


    - name: get fdisk info
      shell: 'fdisk -l | grep /dev/sd'
      register: vasya
      changed_when: false

    - name: print fdisk info
      debug:
         var: vasya.stdout


    - name: extend LVM vg {{vg_name}}
      lvg:
        vg: "{{ vg_name }}"
        pvs: "{{ pv_names }}"


    - name: include new vars calculate tasks
      include_tasks: new-vars.yml



    - name: create new LVM lvols
      lvol: 
        vg: "{{ vg_name }}"
        lv: "{{ item[0].size }}-{{ item[1] }}"
        size: "{{ item[0].size }}"
        state: present
      with_list: "{{ lvm_vols }}"
          


    - name: create folders for mount point for new LVM lvols 
      file:
         path: "{{ kub_mount_dir }}/{{ item[0].size }}/{{ item[0].size }}-{{ item[1] }}"
         state: directory
         owner: "{{ lvol_mount_point_owner }}"
         group: "{{ lvol_mount_point_group }}"
         mode: 0755
      with_list: "{{ lvm_vols }}"

    - name: format LVM lvols if they hasnt
      filesystem:
          fstype: "{{ lvol_fstype }}"
          dev: "/dev/{{vg_name}}/{{ item[0].size }}-{{ item[1] }}"
          force: no
      with_list: "{{ lvm_vols }}"


    - name: mount LVM lvols to the folders and make entries in /etc/fstab
      mount:
        src: "/dev/{{ vg_name }}/{{ item[0].size }}-{{ item[1] }}"
        path: "{{ kub_mount_dir }}/{{ item[0].size }}/{{ item[0].size }}-{{ item[1] }}"
        fstype: "{{ lvol_fstype }}"
        opts: errors=remount-ro,data=journal
        state: mounted
      with_list: "{{ lvm_vols }}"


    - name: set proper perms for   mount point for new LVM lvols 
      file:
         path: "{{ kub_mount_dir }}/{{ item[0].size }}/{{ item[0].size }}-{{ item[1] }}"
         state: directory
         owner: "{{ lvol_mount_point_owner }}"
         group: "{{ lvol_mount_point_group }}"
         mode: 0755
      with_list: "{{ lvm_vols }}"




